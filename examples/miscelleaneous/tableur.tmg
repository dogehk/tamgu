//Spreadsheet in character mode

lisp l;
string msgerr;
string colorred = _sys.colors(7,30,33, false);
string colornrm = _sys.colors(0,0,0,false);

ivector coords = _sys.screensize();
int columnsize = 10;
ivector sz=[coords[0]-6, coords[1]/columnsize];
int codeline = sz[0]+6;

vector v;
mapss formulas;

mapss inputs;
string inputkey;
inputs["Size"] = sz[0]+":"+sz[1];
inputs["File"] = _args[0];

if (_args[0] != "")
    inputs["Data(raw csv)"] = _args[0]+".csv";
else
    inputs["Data(raw csv)"] = "";

fmatrix mat(sz[0],sz[1]);

function initialisation() {
    int i,j;
    string sc;
    for (i in <sz[0]>) {
        v[i] = [];
        for (j in <sz[1]>) {
            if (!i) {
                sc = j;
                v[i].push(sc);
            }
            elif (!j) {
                sc = i;
                v[i].push(sc);
            }
            else
                v[i].push("0");
        }
    }
}

function redx(int x, int y) {
    int i,j;
    string sc;
    for (i in <sz[0],x,1>) {
        v[i] = [];
        for (j in <y>) {
            if (!i) {
                sc = j;
                v[i].push(sc);
            }
            elif (!j) {
                sc = i;
                v[i].push(sc);
            }
            else
                v[i].push("0");
        }
    }
}

function redy(int x, int y) {
    int i,j;
    string sc;
    for (j in <sz[1],y,1>) {
        for (i in <x>) {
            if (!i) {
                sc = j;
                v[i].push(sc);
            }
            elif (!j) {
                sc = i;
                v[i].push(sc);
            }
            else
                v[i].push("0");
        }
    }
}


function readtable(string f) {
    v.clear();
    try {
        svector sv;
        svector cut;
        int i,j;
        string s,k,e;
        sv.read(f);
        bool beg = true;
        for (s in sv) {
            cut=s.split("\t");
            if (beg == true) {
                //we have stored some parameters in the three first cells
                sz[0] = cut[0];
                sz[1] = cut[1];
                columnsize = cut[2];
                inputs["Size"] = sz[0]+":"+sz[1];
                codeline = sz[0]+6;
                mat.dimension(sz[0],sz[1]);
                beg=false;
                //we need to reset them
                cut[0] = '0';
                cut[1] = '1';
                cut[2] = '2';
            }
            j = 0;
            v[i]=[];
            for (e in cut) {
                e=e.trim();
                if (e[0] == "(") {
                    k = i+"_"+j;
                    formulas[k] = e;
                    v[i].push("0");
                }
                else
                    v[i].push(e);
                j++;
            }
            i++;
        }
        evaluation();
    }
    catch {
        initialisation();
        displayall();
    }
}

function writetable(string f) {
    if (f=="") {
        displaymessage("Abort");
        return;
    }
    displaymessage("Writting: "+f);
    file sv(f,"w");
    int i,j;
    string k;
    v[0][0] = string(sz[0]);
    v[0][1] = string(sz[1]);
    v[0][2] = string(columnsize);
    for (i in <sz[0]>) {
        for (j in <sz[1]>) {
            if (j)
                sv.write("\t");
            k = i+"_"+j;
            if (formulas.test(k))
                sv.write(formulas[k]);
            else
                sv.write(v[i][j].trim());
        }
        sv.write("\n");
    }
    v[0][0] = "0";
    v[0][1] = "1";
    v[0][2] = "2";
}

function writecsv(string f) {
    if (f=="") {
        displaymessage("Abort");
        return;
    }
    if ('.csv' not in f)
        f+=".csv";
    displaymessage("Writting (csv): "+f);
    file sv(f,"w");
    int i,j;
    string k;
    for (i in <1,sz[0]>) {
        for (j in <1,sz[1]>) {
            if (j)
                sv.write("\t");
            if (v[i][j][-1] == '!')
                sv.write(v[i][j][:-1].trim());
            else
                sv.write(v[i][j].trim());
        }
        sv.write("\n");
    }
}


//------------------- The Code ---------
//Formulas evaluation

function evaluation() {
    mat.clear();
    string ky;
    int i,j;
    for (i in <1,sz[0]>) {
        for (j in <1,sz[1]>) {
            ky = i+"_"+j;
            if (formulas.test(ky)) {
                mat[i:j] = 0;
            }
            else {
                mat[i:j] = float(v[i][j]);
            }
        }
    }
    if (formulas.size()==0) {
        displayall();
        return;
    }
    msgerr="";
    string msg;
    float val;
    int o;
    bool stop=false;
    for (ky in formulas) {
        i = ky[:"_"][:-1];
        j = ky["_":][1:];
        if ("defun " in formulas[ky]) {
            try {
                l.eval(formulas[ky]);
                v[i][j] = formulas[ky][" ":"("][:-1].trim()+"!";
            }
            catch;
        }
    }

    //Not very efficient, we apply until nothing is modified again
    for (o in <formulas.size()>) {
        stop=true;
        for (ky in formulas) {
            if ("defun " in formulas[ky])
                continue;
            i = ky[:"_"][:-1];
            j = ky["_":][1:];
            try {
                val = l.eval(formulas[ky]);
                if (val != mat[i:j])
                    stop=false;
                mat[i:j] = val;
                v[i][j] = string(val);
                v[i][j]+="!";
            }
            catch(msg) {
                msgerr=msg;
                v[i][j] = "#ERR";
            }
        }
        if (stop)
            break;
    }
    displayall();
    displayerr(msgerr);
}

//Display methods
function dispelement(int i,int j) {
    string u = v[i][j];
    if (u.size() >= columnsize-1)
        u=u[:columnsize-2]+"_";
    print(u);
}

function displayall() {
    int i,j;
    _sys.cls();
    _sys.colors(0,0,0);
    for (i in <sz[0]>) {
        for (j in <sz[1]>) {
            _sys.row_column(i+1,columnsize*j);
            if (!i or !j)
                _sys.colors(7,96,40);
            dispelement(i,j);
            if (!i or !j)
                _sys.colors(0,0,0);
        }
    }
}

function displayerr(string s) {
    _sys.row_column(codeline-4,0);
    _sys.eraseline(0);
    print(s);
}

function displaymessage(string s) {
    _sys.row_column(codeline-3,0);
    _sys.eraseline(0);
    print(s);
}

function showelement(int i, int j) {
    string dsp;
    string ky = i+"_"+j;
    //We check if we are in a formula mode
    if (inputkey != "")
        dsp = inputkey+": "+inputs[inputkey];
    elif (formulas.test(ky)) {
        dsp = i+","+j+": "+formulas[ky];
    }
    else {//When we have a 0, we do not display it
        if (v[i][j].trim()=="")
            v[i][j]="0";
        if (v[i][j] == '0')
            dsp = i+","+j+": ";
        else {
            dsp = i+","+j+": "+v[i][j];
        }
    }

    //we use spaces to clean the cell first
    string space;
    space.padding(columnsize," ");
    _sys.row_column(i+1,columnsize*j);
    print(space);
    //Then we position our cursor again to display our value
    _sys.row_column(i+1,columnsize*j);
    //We use a specific color to show that it has been selected
    _sys.colors(7,31,49);
    dispelement(i,j);
    //Colors are reset, we then display on the last line the current value
    _sys.colors(0,0,0);
    _sys.row_column(codeline-1,0);
    _sys.eraseline(0);
    print(dsp);
}

//----------------------------------------------------------------------------------------------------
//MAIN LOOP
//If a filename is provided, we try to read the file, otherwise we initialise our structure

int i = 1;
int j = 1;

if (inputs["File"]=="") {
    initialisation();
    displayall();
}
else
    readtable(inputs["File"]);

displaymessage("'(': Formula. Ctrl-s: Save. Ctrl-w: Save As. Ctrl-d: Save Raw Data. Ctrl-r Resize");

showelement(i,j);

string s=_sys.getchar();

bool selection = false;
string forme, ky;
int ci=-1,cj=-1;
int lasti, lastj;

while (s[0].ord() != 17) {

    //We use this position to display displaymessages
    displaymessage("'(': Formula. Ctrl-s: Save. Ctrl-w: Save As. Ctrl-d: Save Raw Data. Ctrl-r Resize");
    ky = i+"_"+j;

    //Using arrows
    if (s[0].ord() == 27) {
        _sys.row_column(i+1,columnsize*j);
        dispelement(i,j);
        if (s == _sys_keydel) {
            if (not selection) {
                v[i][j] = "0";
                if (formulas.test(ky))
                    formulas.pop(ky);
            }
            elif (i == ci and j == cj) {
                v[i][j] = "0";
                formulas.pop(ky);
                selection = false;
            }
            showelement(i,j);
            s = _sys.getchar();
            continue;
        }
        elif (s == _sys_keyright)
            j++;
        elif (s == _sys_keyleft)
            j--;
        elif (s == _sys_keyup)
            i--;
        elif (s == _sys_keydown)
            i++;

        i = max(i,1);
        i = min(i,sz[0]-1);
        j = max(j,1);
        j = min(j,sz[1]-1);
        showelement(i,j);
        s = _sys.getchar();
        continue;
    }

    //character deletion with the delete key
    if (s.ord() == 127) {
        if (inputkey!="") {
            inputs[inputkey]=inputs[inputkey][:-1];
        }
        else {
            //We are either modifying a formula or a cell
            if (formulas.test(ky)) {
                if (not selection or (ci == i and cj ==j)) {
                    formulas[ky] = formulas[ky][:-1];
                    if (formulas[ky] == "") {
                        //The formula has been deleted
                        formulas.pop(ky);
                        v[i][j] = "0";
                        selection=false;
                        ci =-1;
                        cj =-1;
                        _sys.row_column(i+1,columnsize*j);
                        //We display the "0" instead
                        dispelement(i,j);
                    }
                    else
                        selection=true;
                }
            }
            else {
                if (!selection) {
                    if (v[i][j].size() > 1)
                        v[i][j] = v[i][j][:-1];
                    else
                        v[i][j] = "0";
                }
            }
        }
        showelement(i,j);
        s=_sys.getchar();
        continue;
    }

    //When introducing a formula, selection is true and the key is the formula position
    if (selection) {
        displaymessage("Use the arrows to select a cell and hit 'enter' to record it. Type '..' and select again to define a range.");
        ky = ci+"_"+cj;
    }

    //When hitting the Carriage Return key
    if (s == "\n") {
        if (inputkey=="Size") {
            ivector iv = inputs["Size"].split(":");
            inputkey="";
            if (iv[0] > sz[0])
                redx(iv[0],iv[1]);
            if (iv[1] > sz[1])
                redy(iv[0],iv[1]);
            sz = iv;
            codeline = sz[0]+6;
            displayall();
        }
        elif (inputkey == "Data(raw csv)") {
            writecsv(inputs["Data(raw csv)"]);
            inputkey="";
        }
        elif (inputkey=="File") {
            writetable(inputs["File"]);
            inputkey="";
        }
        else {
            //If we are in selection mode (formula) then we enable the cell selection with the arrows
            if (selection) {
                string subkey;
                //We test if a ".." has been introduced, in that case, we compute the interval between the structures
                if (lasti != -1 && formulas[ky][-2:] == '..') {
                    if (lasti > i)
                        [lasti,i] = [i,lasti];
                    if (lastj > j)
                        [lastj,j] = [j,lastj];

                    string frm;
                    int n;
                    bool beg=true;

                    formulas[ky] = formulas[ky][:-2];
                    //a single line
                    if (lasti == i) {
                        frm = "mat["+i+":]["+lastj+":"+(j+1)+"]";
                        formulas[ky][-"mat":] = frm;
                    }
                    elif (lastj == j) { //a single column
                        frm = "mat[:"+j+"]["+lasti+":"+(i+1)+"]";
                        formulas[ky][-"mat":] = frm;
                    }
                    else { //a square
                        n = lasti;
                        //&&& is the merge operator 
                        frm = "(&&& ";
                        //we will add several lines together
                        while (n <= i) {
                            if (!beg)
                                frm += " ";
                            else
                                beg=false;
                            frm += "mat["+n+":]["+lastj+":"+(j+1)+"]";
                            n++;
                        }
                        frm += ")";
                        formulas[ky][-"mat":] = frm;
                    }
                }
                else
                    //One element at a time
                formulas[ky] += "mat["+i+":"+j+"] ";
                lasti=i;
                lastj=j;
                i = ci;
                j = cj;
            }
            else {
                displaymessage("eval");
                evaluation();
                _sys.row_column(i+1,columnsize*j);
                //You can add new values with the CR key
                //We showelement it to remove the selection color
                dispelement(i,j);
                //We move to the next cell below
                i++;
                i = max(i,1);
                i = min(i,sz[0]-1);
            }
        }
        showelement(i,j);
        s=_sys.getchar();
        continue;
    }

    if (s[0].ord() < 27) {
        if (s[0].ord() == 4) {
            //ctrl-d
            inputkey="Data(raw csv)";
            _sys.row_column(codeline-1,0);
            print("Data(raw csv): ",inputs["Data"]);
        }
        elif (s[0].ord() == 19 and inputs["File"] != "") //ctrl-s
            writetable(inputs["File"]);
        elif (s[0].ord() == 19 or s[0].ord() == 23) { //ctrl-w/s
            _sys.row_column(codeline-1,0);
            print("File: ",inputs["File"]);
            inputkey="File";
        }
        elif (s[0].ord() == 18) { //ctrl-r
            _sys.row_column(codeline-1,0);
            print("Size: ",inputs["Size"]);
            inputkey="Size";
        }
        showelement(i,j);
        s=_sys.getchar();
        continue;
    }

    if (inputkey == "" and formulas.test(ky) and ci == i and cj == j) {
        formulas[ky]+=s;
        formulas[ky] = formulas[ky].replace(colorred,"");
        formulas[ky] = formulas[ky].replace(colornrm,"");
        //When the "(...)" balances, we exit the selection mode
        if (formulas[ky].count('(') > formulas[ky].count(")")) {
            if (s == ')') {
                int e = formulas[ky].size()-2;
                while (e>0 and formulas[ky][e:].count("(") != formulas[ky][e:].count(")")) e--;
                formulas[ky] = formulas[ky][:e]+colorred+formulas[ky][e]+colornrm+formulas[ky][e+1:];
            }
            selection = true;
            displaymessage('expression');
        }
        else {
            selection=false;
            displaymessage('closed');
        }
        showelement(i,j);
        s=_sys.getchar();
        continue;
    }

    //We detect a '(', we enter the formula mode
    if (s=='(') {
        ci = i;
        cj = j;
        lasti=-1;
        lastj=-1;
        formulas[ky] = s;
        selection = true;
        v[i][j] += "!";
        displaymessage("Use the arrows to select a cell and hit 'enter' to record it. Type '..' and select again to define a range.");
        showelement(i,j);
        s=_sys.getchar();
        continue;
    }

    //In case of pasting code
    if (s.size() > 2 and s[0] == '(') {
        s=s.trim();
        string u,k;
        //We try to detect from which place it was copied
        for (k in formulas) {
            if (formulas[k].trim() == s) {
                u=k;
                break;
            }
        }
        if (u != "") {
            u["_"]=":";
            string l= u[:":"];
            string c= u[":":];
            string rl = i+":";
            string rc = ":"+j;
            s=s.replace(l,rl);
            s=s.replace(c,rc);
            formulas[ky]=s;
            showelement(i,j);
            s=_sys.getchar();
            continue;
        }
    }

    if (inputkey != "")
        inputs[inputkey] += s;
    else {
        if (not selection) {
            if (v[i][j] == '0')
                v[i][j]=s;
            else
                v[i][j]+=s;
        }
    }
    showelement(i,j);
    s=_sys.getchar();
    continue;
}








s="";
s=s[:-1];


